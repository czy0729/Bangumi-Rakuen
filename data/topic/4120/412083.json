{"id":412083,"avatar":"//lain.bgm.tv/pic/user/m/000/59/43/594317.jpg","floor":"#1","group":"～技术宅真可怕～","groupHref":"/group/a","groupThumb":"//lain.bgm.tv/pic/icon/m/000/00/00/11.jpg","message":"在群里闲聊时突发奇想而作，初衷是探寻那些某些帖子究竟是被谁在不断顶起，旨在勾勒出特定的聊天圈层轮廓，当然，也可用于找寻那些热衷于回复自己的人。  <br><br>## 运作原理<br>首先锁定用户 A近期发布的 10 个帖子，从中筛选出在其所有帖子的直接回复里(不包括次级回复)回复量位居前三的用户。随后，针对这三位用户，再度挖掘各自回复量前三的用户。依此模式不断延展，层层深入。  <br><br>## 数据来源<br><a href=\"https://bgm.tv/group/topic/374807\" target=\"_blank\" rel=\"nofollow external noopener noreferrer\" class=\"l\">https://bgm.tv/group/topic/374807</a>  <br><br>## 示例<br>在对数据进行脱敏处理并使用水果名称替换后，我们可以观察到，在以Apple为中心的社交网络图中，Banana和Cherry显得尤为活跃。这两个节点在图中的连接数较多，表明它们在该聊天圈层中扮演着重要的角色，可能是信息交流的核心节点或是社交活动的积极分子。<br>进一步分析，我们可以推测Banana和Cherry可能是群组中的意见领袖或者是具有较高影响力的成员。它们与Apple以及其他成员之间的频繁互动，可能意味着它们在信息传播、话题引导或是社交活动中发挥着关键作用。此外，Banana与Elderberry、Fig和Grape的紧密联系可能表明它们在某些共同兴趣或活动上有深入的交流和合作。而Cherry与Lemon、Banana和Apple的多次交互，可能意味着它们在维护群组的社交结构和促进成员间的互动方面起到了桥梁作用。<br><img src=\"https://ice.frostsky.com/2024/12/15/ec97b2924d2a886f1c9ea9eff442e7e1.png\" class=\"code\" rel=\"noreferrer\" referrerpolicy=\"no-referrer\" alt><br><br>## 代码呈现<br><br><div class=\"codeHighlight\"><pre>import requests<br><br>def get_topic_ids(username):<br>    url = \"https://bgm.nyamori.moe/forum-enhance/query\"<br>    data = {\"users\": [username], \"type\": \"group\"}<br>    response = requests.post(url, json=data)<br>    topic_ids = []<br>    if response.status_code == 200:<br>        result = response.json()<br>        try:<br>            topic_ids = [topic['id'] for topic in result[username]['recentActivities']['topic']]<br>        except KeyError:<br>            print(f\"用户名 {username} 对应的相关数据结构不符合预期，请检查。\")<br>    else:<br>        print(f\"请求失败，状态码: {response.status_code}\")<br>    return topic_ids<br><br>def summarize_user_ids(topic_ids, exclude_user=None):<br>    base_url = \"https://bgm.nyamori.moe/history/group/{}/latest\"<br>    all_username_count = {}<br>    for topic_id in topic_ids:<br>        full_url = base_url.format(topic_id)<br>        response = requests.get(full_url)<br>        if response.status_code == 200:<br>            data = response.json()<br>            for post in data.get('postList', []):<br>                username = post.get('user', {}).get('username')<br>                if username and username != exclude_user:<br>                    all_username_count[username] = all_username_count.get(username, 0) + 1<br>        else:<br>            print(f\"获取 topic_id 为 {topic_id} 的历史数据失败，状态码: {response.status_code}\")<br><br>    sorted_username_count = sorted(all_username_count.items(), key=lambda x: x[1], reverse=True)<br>    return sorted_username_count[:3]  # 取前三位用户<br><br>def analyze_user_network(username, depth=1, max_depth=3):<br>    if depth > max_depth:  # 限制递归深度<br>        return {}<br><br>    # 获取该用户相关的话题<br>    topic_ids = get_topic_ids(username)<br>    if not topic_ids:<br>        return {}<br><br>    # 统计该用户话题中回复最多的前三个用户，排除自身<br>    top_users = summarize_user_ids(topic_ids, exclude_user=username)<br>    user_network = {username: top_users}<br><br>    # 对前三用户递归分析<br>    for user, _ in top_users:<br>        sub_network = analyze_user_network(user, depth + 1, max_depth)<br>        if sub_network:<br>            user_network[user] = sub_network<br><br>    return user_network<br><br>def print_network(network, depth=0):<br>    indent = \"  \" * depth<br>    for user, connections in network.items():<br>        print(f\"{indent}{user}:\")<br>        # 检查 connections 是否是列表格式<br>        if isinstance(connections, list):<br>            for connection, count in connections:<br>                print(f\"{indent}  {connection}: {count}\")<br>        elif isinstance(connections, dict) and connections:<br>            print_network(connections, depth + 1)<br><br>if __name__ == \"__main__\":<br>    target_username = \"Apple\"  # 在这里修改你想要查询的用户名<br>    user_network = analyze_user_network(target_username, max_depth=3)<br>    print(\"用户网络分析结果：\")<br>    print_network(user_network) </pre></div>","time":"2024-12-15 19:32","title":"Bangumi小组用户关系网络查询","userId":"pereza","userName":"Mikuorz","userSign":"(不打分，不评价，点格子///喜欢一个东西不应该是有压力的)"}