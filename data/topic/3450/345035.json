{"id":345035,"avatar":"//lain.bgm.tv/pic/user/m/000/34/68/346809.jpg","floor":"#1","group":"～技术宅真可怕～","groupHref":"/group/a","groupThumb":"//lain.bgm.tv/pic/icon/m/000/00/00/11.jpg","message":"本工具是利用现有爬取的条目历史打分数据，模拟条目各个时期的评分和排名数据等。<br><a href=\"https://windrises.net/bgmtools/review\" target=\"_blank\" rel=\"nofollow external noopener\" class=\"l\">访问地址</a>   <a href=\"https://greasyfork.org/zh-CN/scripts/38343-bangumi%E6%97%B6%E5%85%89%E6%9C%BA\" target=\"_blank\" rel=\"nofollow external noopener\" class=\"l\">油猴脚本</a>   <a href=\"https://github.com/windrises/bgmtools\" target=\"_blank\" rel=\"nofollow external noopener\" class=\"l\">代码和原始数据</a><br>照例先上截图<img src=\"http://wx2.sinaimg.cn/mw690/0062shohly1fodjztlphsj30x60jc400.jpg\" class=\"code\" alt><br>脚本安装后的使用效果<img src=\"http://wx1.sinaimg.cn/mw690/0062shohly1fodk1ghzozj30ty0i7myj.jpg\" class=\"code\" alt><br>主要功能：<br>1、可以查看条目的分数，名次，标记数走势<br>2、可以指定多个条目查询，并进行比对<br>3、可以指定日期和名次来查找条目<br>4、可以查看指定日期的排行榜<br>5、提供<a href=\"https://github.com/windrises/bgmtools/tree/master/api\" target=\"_blank\" rel=\"nofollow external noopener\" class=\"l\">api</a><br><br>Bangumi采取的应该是imdb的排名计算方式，这个已经在别的帖子里得到证实了。<br>imdb公式是weighted rank = (v ÷ (v + m)) × R + (m ÷ (v + m)) × C  其中v是投票数，m是最小投票数（动画区是51，别的区是21），R是该条目的算术平均分，C是此时所有动画/书籍...的平均分（动画区现在大概是7.2）<br>我在模拟时也严格按照这个公式来计算，计算结果我也与Wayback Machine简单对比过，吻合的还不错。可能会出现轻微偏差的原因一个是bgm在计算排名时可能还有别的考量，一个是可能有少量用户后来改变打分了。<br><br>这是我做的第三个Bangumi小工具了，这三个工具其实互有联系，很多数据都可以复用。你可以在网站顶部栏找到前两个，这次我也顺便对它们做了一些改进。数据库也重构了，并且从sqlite迁移到了mysql。如果说做前两个工具是为了学习，那这次就纯粹是因为兴趣和好奇了。<br>做这个时光机最大的困难是在数据上。用户页和条目评分页加起来需要爬取210万个页面，我用我的小本子爬了一天半，最后得到1个G的json数据。（当然是爬的<a href=\"https://mirror.bgm.rin.cat\" target=\"_blank\" rel=\"nofollow external noopener\" class=\"l\">镜像网站</a>，在此灰常感谢<a href=\"/user/magicfish1990\" class=\"l\">@MagicFish1990一边吃草一边</a>。如果爬主站，速度肯定得调小，可能得爬一个多星期<img src=\"/img/smiles/tv/15.gif\" smileid=\"54\" alt=\"(bgm38)\">)此外，对于这么大的数据量，怎样处理也是个难题，特别是我寒假回家后身边只有一个小笔记本。为了能在有限条件下尽快算出结果同时减小对我的笔记本硬盘的伤害，我在优化计算方式中下了不少功夫，以尽量减少执行sql语句的次数。<br><br>这次花的时间比较长，中间也经历过多次重爬数据，数据库清空等绝望的时刻。也闪出过不少点子，但最终展示出来的就是这些，还有不少想法因为各种各样的原因流产了（但也可能等之后有时间了再加上），比如：<br>条目全年代统计图，包括分数分布，平均分走势等等；<br>用户全年代统计图，包括注册数量增长，用户活跃时长分布，阅历天梯榜等等；<br>个人的统计数据和分析，包括经常活跃的时间点，在动画里一共花了多长时间的人生，兴趣爱好点，动画推荐，好友推荐等等；<br>条目分数预测，我感觉bgm可以拿来训练的有用数据不够多，所以也考虑过直接来个简单的时间序列分析（这个功能很有趣，但是想要做好我觉得比较难，欢迎指教）；<br>自定义排名规则，比如不同阅历的用户打分权重不同等等，可惜这个计算量太大，最多我提前预设好几个选项；<br>恶意刷分检测，这个做起来是很容易的，我做好一半后还是觉得这个有点鸡肋而且很引战，于是放弃了；<br>等等...<br>如果以后有时间的话，我可能会再做个用户个性化方面的工具。（可能，请不要过度期待<img src=\"/img/smiles/tv/58.gif\" smileid=\"97\" alt=\"(bgm81)\">）<br>如果有人还有别的有意思的点子欢迎提出来。或者你在实现你的想法的时候懒的爬数据，但是刚好可以用到我爬好的数据或者api的时候，上面的链接或许能帮到你。我之后也可能会不定期更新数据。<br><br>展示的数据可能会由于上面提到的原因与实际数据有轻微偏差，仅起参考作用。<br>虽然我也做过很多检查和测试，但是毕竟时间匆忙水平有限，如果你遇到了bug或者发现数据出了问题，或者有什么建议和意见，请告诉我，非常感谢。<img src=\"/img/smiles/tv/01.gif\" smileid=\"40\" alt=\"(bgm24)\"> ","time":"2018-2-11 18:17","title":"Bangumi时光机 回顾条目历史评分和排名","userId":"windrises","userName":"windrises","userSign":"(一个纠结的面瘫伪宅)"}