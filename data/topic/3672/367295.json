{"id":367295,"avatar":"//lain.bgm.tv/pic/user/m/000/31/77/317704.jpg","floor":"#1","group":"～技术宅真可怕～","groupHref":"/group/a","groupThumb":"//lain.bgm.tv/pic/icon/m/000/00/00/11.jpg","message":"<div class=\"quote\"><q>当一个人想拖延的时候，TA 可以完成任何其他事</q></div>因为不想干手头的活，于是试着再次尝试解决一个经典问题：在 Bangumi Wiki 和 IMDB 之间进行匹配。<br><br>得益于 Trim21 推动的 Bangumi 开源运动，首先从 bangumi/Archive 获取了最近的 Bangumi Wiki dump，然后从 IMDB 获取了 IMDB 数据库的两个子集（akas, basics）。因为对所有项目做匹配工作量太大，因此暂时把范围限定在 Bangumi 的「动画」分类。<br><br>首先先尝试处理来自 Bangumi 的数据。subjects 文件中有 Wiki 中的全部条目，可以用 infobox 首行的属性来判断条目类型，我们需要的动画是 `animanga/TVAnime`。（可以用 platform 属性进一步筛选，不过暂时没管了。） 因为只是一个早期尝试，暂时决定先用多文种标题 + 发行年作为匹配标准。用正则提取了 infobox 中的首个年份作为发行年，标题则是选择了 {原标题, 中文标题, 罗马字标题（仅当原标题为日文时}。最后得到来自 Bangumi 的数据 8527 条。<br><br>> 这个过程中还发现了一些诡异的条目，5 个条目没有在首行标注类别，91 个条目标注的类别不在合法类别中。<br><div class=\"codeHighlight\"><pre>[('animanga/Manga', 137859),<br>('Album', 65446),<br>('Game', 41603),<br>('animanga/Novel', 39297),<br>('animanga/Book', 39128),<br>('real/Television', 13295),<br>('animanga/TVAnime', 8872),<br>('animanga/Movie', 4131),<br>('animanga/OVA', 3711),<br>('animanga/Anime', 2380),<br>('', 81),<br>('None', 8),<br>('animanga/BookSeries', 3),<br>('Album ', 1),<br>('animangaManga', 1)]</pre></div><br><br>然后处理来自 IMDB 的数据。因为 basic 中只有主标题，akas 中才有多文种标题，因此需要用 imdb_id 为 key 在两个文件之间 join 一次。不过考虑到数据量对我用的 Python 不是很友好（akas 30M line, basic 8M line)，因此选择双指针手动 join，顺带进行了一些预筛选，把非 Animation，没有发行年（startYear）或类型不是影视作品的行删掉了。最后得到来自 IMDB 的数据 377108 条。<br><br>最后进行两者间的匹配。这里用的是一个叫做 dedupe 的 Python 库，具体代码参考了<a href=\"https://dedupeio.github.io/dedupe-examples/docs/record_linkage_example.html\" target=\"_blank\" rel=\"nofollow external noopener noreferrer\" class=\"l\">这个教程</a>。（这类跨数据库建立匹配的问题，学术上称之为 Record Linkage。）dedupe 库相比于其他类似的库，优势在于有一个手动的标注过程（Active Labeling），程序会扔给你一对数据，让人来判断是否匹配，再用这个结果尝试推导合适的匹配规则。然而理想很美好，现实很骨感。实作的时候发现自己定义的匹配标准还是太弱了，会发生连人类都难以判断的情况，如下所示：<br><br><div class=\"codeHighlight\"><pre>names : ('ベルセルク', '剑风传奇', 'Berserk')<br>year : 2016<br><br>names : ('Kenpû Denki Berserk', 'Berserk')<br>year : 1997<br><br>10/10 positive, 17/10 negative<br>Do these records refer to the same thing?<br>(y)es / (n)o / (u)nsure / (f)inished / (p)revious<br>u<br>names : ('Riba', '猫的梦想')<br>year : 2003<br><br>names : ('Riba',)<br>year : 1973<br><br>10/10 positive, 17/10 negative<br>Do these records refer to the same thing?<br>(y)es / (n)o / (u)nsure / (f)inished / (p)revious<br>n<br>names : ('Inspector Gadget', '奇探加杰特')<br>year : 1983<br><br>names : ('Inspector Gadget',)<br>year : 2015<br><br>10/10 positive, 18/10 negative<br>Do these records refer to the same thing?<br>(y)es / (n)o / (u)nsure / (f)inished / (p)revious</pre></div><br><br>最后用默认参数跑完一轮，得到了 631 条匹配结果。虽然效率太低，仅占输入 Bangumi 数据的 7.5% 都不到，但是从匹配结果来看还是可以的，计算出的匹配项还是相对准确的。<br><br>（以下选择了匹配评分较低的示例，匹配评分低说明模型对这个匹配不自信）<br><div class=\"codeHighlight\"><pre>CID522, 0.754205048084259, [{'bgm_id': 53760, 'names': ('元祖天才バカボン', '元祖天才傻鹏', 'Ganso tensai Bakabon'), 'year': '1975'}, {'imdb_id': 'tt0305030', 'year': '1975', 'names': ('The Genius Bakabon', 'Ganso tensai Bakabon')}]<br>CID523, 0.754205048084259, [{'bgm_id': 513, 'names': ('海がきこえる', '听到涛声', 'Umi ga kikoeru'), 'year': '1993'}, {'imdb_id': 'tt0108432', 'year': '1993', 'names': ('Umi ga kikoeru', 'Ocean Waves')}]<br>CID524, 0.754205048084259, [{'bgm_id': 490, 'names': ('灼眼のシャナ', '灼眼的夏娜', 'Shakugan no Shana'), 'year': '2005'}, {'imdb_id': 'tt0972713', 'year': '2005', 'names': ('Shakugan No Shana', 'Shakugan no Shana')}]<br>CID525, 0.754205048084259, [{'bgm_id': 45771, 'names': ('夢で逢えたら', '如果在梦里遇见你', 'Yume de aetara'), 'year': '1998'}, {'imdb_id': 'tt0426383', 'year': '1998', 'names': ('Yume de aetara', 'If I See You in My Dreams')}]<br>CID526, 0.754205048084259, [{'bgm_id': 41983, 'names': ('巨人の星', '巨人之星', 'Kyojin no hoshi'), 'year': '1968'}, {'imdb_id': 'tt1661592', 'year': '1968', 'names': ('Star of the Giants', 'Kyojin no hoshi')}]</pre></div><br><br>代码和结果见 <a href=\"https://gist.github.com/jerrylususu/5f60cbe41f303056dfa0fc72e80ba288\" target=\"_blank\" rel=\"nofollow external noopener noreferrer\" class=\"l\">Github Gist</a>。（十分凌乱，切勿学习，毕竟只花了 4 个小时...）建议在 Python 3.8+ 中执行，遇到包导入出错就 pip 补吧。<br><br>可能的改进：<br>* 更好的匹配规则（发行商？主创？）<br>* 更精确的筛选（Bangumi 的 platform，IMDB 的 titleType...）<br>* 更优秀的算法（ML？DL？）<br>* 结合其他数据库（本方法只支持能 dump 的数据库，不能 dump 的就没办法了）<br><br>希望借此文抛砖引玉，Let's make Bangumi great again! ","time":"2022-1-20 04:44","title":"[Bangumi Open Source] Bangumi Wiki 与 IMDB 匹配乱谈","userId":"317704","userName":"NekoNull","userSign":""}