{"id":368673,"avatar":"//lain.bgm.tv/pic/user/m/000/45/19/451958.jpg","floor":"#1","group":"～技术宅真可怕～","groupHref":"/group/a","groupThumb":"//lain.bgm.tv/pic/icon/m/000/00/00/11.jpg","message":"我有一组图片如下：<br><img src=\"https://tupian.li/images/2022/04/04/image0ef8c5d4b25958cf.png\" class=\"code\" rel=\"noreferrer\" referrerpolicy=\"no-referrer\" alt><br><br>简化模型如下：<br><img src=\"https://tupian.li/images/2022/04/04/imagee9e04425a845860e.png\" class=\"code\" rel=\"noreferrer\" referrerpolicy=\"no-referrer\" alt><br>图中，背景为 #000 的纯黑；<br>四周的红色区域为“可能存在东西”的干扰区域，该区域内可能存在非纯黑的像素；<br>中心的白色矩形为“想要获取”的区域。假设每张图片中，该区域的位置可能会有少量变化，但一定会覆盖在整张图片的中心处。<br><br>那么，怎么避免红色区域的干扰，提取白色矩形的边界坐标呢？<br>我的思路一是<span style=\"text-decoration: line-through;\">暴力搜索</span>从中心坐标出发，对上下左右的像素遍历探测，直到探到纯黑。<br>二是<span style=\"text-decoration: line-through;\">暴暴暴力搜索</span>从中心坐标出发，跑A*算法探测出整块孤立的非纯黑像素群，取其中x、y最大值最小值。好处是万一“想要获取”区域内存在少量纯黑像素，可以不被误认为边界。坏处，显而易见，这慢得要死。<br><br>有什么更巧的方法嘛？感谢班友<img src=\"/img/smiles/tv/01.gif\" smileid=\"40\" alt=\"(bgm24)\"> ","time":"2022-4-4 20:04","title":"[求助] 图片去黑边（检测）算法","userId":"451958","userName":"冈崎羽未鹰原汐","userSign":""}