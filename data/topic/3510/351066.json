{"avatar":"//lain.bgm.tv/pic/user/m/000/28/76/287622.jpg","floor":"#1","group":"～技术宅真可怕～","groupHref":"/group/a","groupThumb":"//lain.bgm.tv/pic/icon/m/000/00/00/11.jpg","message":"tl,dr; 自带的这个pyenv版本比较旧，需要手动进入对应目录拉取一下最新的代码才能安装比较新的python版本，而且需要设置“language: generic”才能避免一些奇怪的行为<br><br><br>有个py3.7项目想用travis跑单元测试，然后发现travis上面的python37只有3.7.1，那也行吧<br>然后直接用3.7.1跑了一下我的测试用例，嗯，怎么通不过？<br>发现一个依赖的c扩展没有编译后的二进制文件，但我开发和运行都是在3.7.3版本下，那我直接用pyenv安一个最新的3.7.3总可以了吧。<br><br>然后按照pyenv的文档设置好一切东西，发现怎么这个python版本还是3.7.1，还是没法加载这个依赖？<br>仔细研究了一下才发现travis自带了一个pyenv。导致我的一堆命令调用的并不是我后来安装的那个pyenv<br>这一刻我才明白了为什么我在用3.7的时候python版本是3.7.1而不是最新的3.7.3，这个pyenv应该是之前内置在travis镜像里面的，所以版本已经很旧了<br><br>而且这中间同时还有一个陷阱，是如果我设置travis的环境为“language: python”，这个pyenv又会有一些其他奇怪的行为，但如果我设置了“language: generic”，哪怕我用pyenv重新安一个3.7.1，也不会出现任何的错误。<br><br>坑死我了<img src=\"/img/smiles/tv/15.gif\" smileid=\"54\" alt=\"(bgm38)\"> ","time":"2019-6-9 00:42","title":"跟travis自带的pyenv战斗了一晚上","userId":"trim21","userName":"Trim21","userSign":"(异端比异教徒更可恨)"}